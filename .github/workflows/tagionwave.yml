name: Test Tagionwave

on: 
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Artifact run id'
        required: false
        type: number
      clean:
        description: 'Reset network bills'
        required: true
        default: true
        type: boolean
      wallets:
        description: 'How many wallets'
        required: true
        type: number
        default: 5
      nodes:
        description: 'Amount of nodes'
        required: true
        type: number
        default: 5
          #      mode:
          #        description: 'Network Mode'
          #        required: true
          #        default: 'INTERNAL'
          #        type: choice
          #        options:
          #          - INTERNAL
          #          - LOCAL
          #          - PUB
          #      environment:
          #        description: 'Environment to run tests against'
          #        type: environment
          #        required: true

jobs:
  deploy_tagionwave:
    runs-on: testnet
    environment: 
      name: testnet-mobile
      url: http://10.210.2.10:8080

    steps:
      - name: get artifact
        run: |
          rm -rf *
          loginctl enable-linger moonbase
          gh run download ${{ inputs.artifact_run_id }} -n successful_artifact --repo tagion/tagion
          ls
          tar -xzf *.tar.gz

      - name: Delete stuff
        if: ${{ inputs.clean }}
        run: |
          cd ~/.local/share/
          rm -rf tagion || echo "No data to remove"

      
      # - name: Backup old data
      #   if: ${{ inputs.clean }}
      #   run: |
      #     DIR_EPOCH=$(stat -c%W ~/.local/share/tagion)
      #     cd ~/.local/share/
      #     OLD_TAR_NAME=tagion_$(date -d @$DIR_EPOCH +%F_%H-%M).tar.gz && \
      #       tar czf $OLD_TAR_NAME tagion/ && \
      #       rm -r tagion || \
      #       echo "No old data to backup"

      - name: Delete old backups
        if: ${{ inputs.clean }}
        run: |
          ls -1t ~/.local/share/tagion_* | tail -n +10 | xargs rm -v || echo "No old backups to be removed"

      - name: Create new bills
        if: ${{ inputs.clean }}
        run: |
          cd build/x86_64-linux/bin
          ./tagion -s
          mkdir ~/.local/share/tagion/wallets/ || "folder already exists"
          wget --output-document=~/.local/share/tagion/wallets/bill-auzahlung.hibon https://raw.githubusercontent.com/tagion/qa_payout_test/master/wallet1/bills/bill_0.hibon
          ./create_wallets.sh -b $PWD -k ~/.local/share/tagion/wave -t ~/.local/share/tagion/wallets -w ${{ inputs.wallets }} -n ${{ inputs.nodes }} -u ~/.local/share/tagion/wallets/keys.txt

      - name: start service
        run: |
          cd build/x86_64-linux/bin
          export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1001/bus
          export XDG_RUNTIME_DIR=/run/user/1001
          systemctl stop --user neuewelle.service || echo "No wave service was running"
          systemctl stop --user tagionshell.service || echo "No shell service was running"
          mkdir -p ~/.local/bin ~/.local/share/tagion ~/.config/systemd/user
          cp run_network.sh ~/.local/share/tagion/wave/
          cp tagion ~/.local/bin/
          echo "Deploying revision" >> $GITHUB_STEP_SUMMARY
          ~/.local/bin/tagion --version >> $GITHUB_STEP_SUMMARY
          cp tagionshell.service neuewelle.service ~/.config/systemd/user
          systemctl --user daemon-reload
          systemctl restart --user neuewelle.service
          systemctl restart --user tagionshell.service
