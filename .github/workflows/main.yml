name: Main Flow
on:
  workflow_dispatch:
  push: 
    branches: 
      - current
env:
  TARGET: x86_64-linux
  STAGE: commit
  DC: dmd
  CD_PARALLEL: 2
  RETENTION_DAYS_BINS: 3
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  UNITTEST_COV: unittest-cov
  GITBOT_TOKEN: ${{ secrets.GITBOT_TOKEN }}
  ARTIFACT_DIR: /mnt/nfs/artifacts/${{ github.sha }}-${{ github.run_attempt }}

permissions:
  contents: read
  pages: write
  id-token: write 

jobs:
  build:
    runs-on: CI
    timeout-minutes: 5
    steps:
      - run: |
          cd ..
          git clone git@github.com:tagion/tagion.git || echo "repo already exists"

      - run: |
          git fetch
          git checkout ${{ github.sha }}
          git clean -f && git restore . 

      - name: Build tagion
        run: |
          export DC=${{ env.DC }}
          make tagion release -j || make proper tagion release

      - name: Post run
        if: always()
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          trunk=$(find build/x86_64-linux/bin -type f -not -name "*.o" -not -path "*/cov/*")
          cp -r --parents $trunk ${{ env.ARTIFACT_DIR }}

          make clean


  unittest:
    runs-on: CI
    timeout-minutes: 3
    steps:
      - run: |
          cd ..
          git clone git@github.com:tagion/tagion.git || echo "repo already exists"

      - run: |
          git fetch
          git checkout ${{ github.sha }}
          git clean -f && git restore . 

      - name: Run unittest
        run: |
          export DC=${{ env.DC }}
          make unittest-cov -j || make proper unittest-cov

      - name: Report unittest
        run: |
          RESULT=$(cat logs/${{ env.TARGET }}/unittest.log | grep -E "^[0-9]+ modules passed unittests")
          echo -e "### :heavy_check_mark: Unittests passed \n $RESULT" >> $GITHUB_STEP_SUMMARY

      - name: Upload code coverage results
        run: |
          cp logs/${{env.TARGET}}/cov/* .      
          bash <(curl -s https://codecov.io/bash) -t ${{ env.CODECOV_TOKEN }} -f "!*/cov/*"
          rm -- *.lst

      - name: Post run
        if: always()
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          cp -r --parents logs/ build/${{ env.TARGET }}/bin/unittest-cov ${{ env.ARTIFACT_DIR }}

          make clean
          rm -r logs/ || echo "no logs"

  commit_stage:
    runs-on: CI
    timeout-minutes: 5

    steps:
      - name: get repository
        run: |
          cd ..
          git clone git@github.com:tagion/tagion.git || echo "repo already exists"

      - name: pull
        run: |
          git fetch
          git checkout ${{ github.sha }}
          git clean -f && git restore . 

      - name: Run commit stage tests
        run: |
          export DC=${{ env.DC }}
          export TEST_STAGE=commit
          export TESTBENCH_FLAGS=--silent 
          make bddtest -j || make proper bddtest

      - name: Report commit stage tests
        if: always()
        run: | 
          sleep 5
          ./build/${{ env.TARGET }}/bin/collider -c logs/${{ env.TARGET }}/bdd/commit/results
          ./build/${{ env.TARGET }}/bin/collider reporter -o /dev/stdout logs/${{ env.TARGET }}/bdd/commit/results >> $GITHUB_STEP_SUMMARY
          $PWD/build/${{ env.TARGET }}/bin/bddenv.sh ./build/${{env.TARGET}}/bin/collider reporter -f "github" logs/${{ env.TARGET }}/bdd/commit/results
          ./build/${{ env.TARGET }}/bin/collider -c logs/${{ env.TARGET }}/bdd/commit/results | grep "Test result success!"

      - name: Post run
        if: always()
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          make ci-files
          trunk=$(find build/${{ env.TARGET }}/bin -type f -not -name "*.o" -not -path "*/cov/*")
          cp -r --parents logs/ $trunk ${{ env.ARTIFACT_DIR }}

          make clean
          rm -r logs/ || echo "no logs"

  acceptance_stage:
    runs-on: CD
    timeout-minutes: 7
    needs: [commit_stage, unittest, build]
    
    steps:
      - name: Copy Artifact to local machine
        run: |
          find . -mindepth 1 -delete
          cp -r ${{ env.ARTIFACT_DIR }}/build .

      - name: Run collider tests
        run: |
          id
          pwd
          hostname
          source $PWD/build/${{ env.TARGET }}/bin/bddenv.sh
          export DBIN=$PWD/build/${{ env.TARGET }}/bin
          export DLOG=$PWD/logs/${{ env.TARGET }}
          export COLLIDER_ROOT=$PWD/logs/${{ env.TARGET }}/bdd
          export PATH=$DBIN:$PATH
          ./build/${{ env.TARGET }}/bin/collider --silent -r acceptance -j ${{env.CD_PARALLEL}} -b build/${{ env.TARGET }}/bin/testbench -s build/${{ env.TARGET }}/bin/collider_schedule.json  

      - name: Generate reports
        if: always()
        run: |
          sleep 5
          ./build/${{ env.TARGET }}/bin/collider -c logs/${{ env.TARGET }}/bdd/acceptance/results
          ./build/${{ env.TARGET }}/bin/collider reporter -o $GITHUB_STEP_SUMMARY logs/${{ env.TARGET }}/bdd/acceptance/results
          $PWD/build/${{ env.TARGET }}/bin/bddenv.sh ./build/${{ env.TARGET }}/bin/collider reporter -f "github" logs/${{ env.TARGET }}/bdd/acceptance/results
          ./build/${{ env.TARGET }}/bin/collider -c logs/${{ env.TARGET }}/bdd/acceptance/results | grep "Test result success!"

      - name: Post run
        if: always()
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          cp -r --parents logs/ ${{ env.ARTIFACT_DIR }}
          find . -mindepth 1 -delete

  create_artifact:
    runs-on: CI
    needs: acceptance_stage
    if: always()
    steps:
      - name: Create tar ball
        run: |
          cd /mnt/nfs/artifacts
          artifact=${{ github.sha }}-${{ github.run_attempt }}
          tar czf $artifact.tar.gz --directory=$artifact/ .
        
      - uses: actions/upload-artifact@v3
        with:
          name: successful_artifact
          path: ${{ env.ARTIFACT_DIR }}.tar.gz
          if-no-files-found: error

      - name: Post run
        run: |
          rm -r ${{ env.ARTIFACT_DIR }}

  android_libmobile:
    needs: commit_stage
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, armv7a, x86_64]
    runs-on: CI
    steps:
      - name: get repository
        run: |
          cd ..
          git clone git@github.com:tagion/tagion.git || echo "repo already exists"
      - name: pull
        run: |
          git clean -f && git restore . 
          git checkout current
          git pull

      - name: Install android tools
        run: |
          make -f tub/scripts/setup_android_toolchain.mk TARGET_ARCH=${{ matrix.arch}}

      - name: Build
        run: |
          export PATH="tools/ldc2-1.34.0-linux-x86_64/bin:$PATH"
          make DC=ldc2 PLATFORM=${{ matrix.arch }}-linux-android libmobile
          file ./build/${{ matrix.arch }}-linux-android/lib/libmobile.so

      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: libmobile
          path: ./build/*/lib/libmobile.so
          if-no-files-found: error

      - name: Cleanup
        run: 
          make PLATFORM=${{ matrix.arch }}-linux-android clean

  ios_libmobile:
    needs: commit_stage
    uses: ./.github/workflows/ios.yml

  ddoc_push:
    if: false
    runs-on: CD
    needs: acceptance_stage 
    steps:
      - name: Copy Artifact to local machine
        run: |
          rm -rf *
          cp /mnt/nfs/${{needs.acceptance_stage.outputs.stage}}/${{needs.acceptance_stage.outputs.tarball}} .
          tar -xzf ${{needs.acceptance_stage.outputs.tarball}}
          echo $(ls build/)     
      - name: Send ddoc to repository 
        run: |
          ls logs
          git clone https://${{ secrets.API_TOKEN_GITHUB }}@github.com/tagion/ddoc.git
          cp -R build/ddoc/* ddoc/          
          cd ddoc
          git config user.email "gitbot@decard.io"
          git config user.name "gitbot"
          git add .
          git commit -m "ddocs updated" || echo "nothing to commit"
          git push https://${{ secrets.API_TOKEN_GITHUB }}@github.com/tagion/ddoc.git || echo "repo already up to date"

      - name: clean up
        run: rm -rf *
 
  docs_build:
    environment:
      name: github-pages
      url: https://docs.tagion.org
    runs-on: ubuntu-latest
    needs: acceptance_stage
    steps:
      - uses: actions/checkout@v3
      - uses: actions/configure-pages@v3
      - name: Copy md files
        run: |
          rm -r build/docs/ || echo 'no files to remove'
          mkdir -p build/docs/
          cp -r index.html _sidebar.md README.md documents/ build/docs/
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'build/docs/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
